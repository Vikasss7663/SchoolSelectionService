/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.school.management.schema.student;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StudentEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4104274608402725632L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StudentEvent\",\"namespace\":\"com.school.management.schema.student\",\"fields\":[{\"name\":\"studentId\",\"type\":[\"int\"]},{\"name\":\"studentName\",\"type\":[\"string\",\"null\"]},{\"name\":\"studentSemester\",\"type\":[\"int\"]},{\"name\":\"studentYear\",\"type\":[\"int\"]},{\"name\":\"schoolId\",\"type\":[\"int\"]},{\"name\":\"schoolName\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StudentEvent> ENCODER =
      new BinaryMessageEncoder<StudentEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StudentEvent> DECODER =
      new BinaryMessageDecoder<StudentEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StudentEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StudentEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StudentEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StudentEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StudentEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StudentEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StudentEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StudentEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Object studentId;
  private java.lang.CharSequence studentName;
  private java.lang.Object studentSemester;
  private java.lang.Object studentYear;
  private java.lang.Object schoolId;
  private java.lang.CharSequence schoolName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StudentEvent() {}

  /**
   * All-args constructor.
   * @param studentId The new value for studentId
   * @param studentName The new value for studentName
   * @param studentSemester The new value for studentSemester
   * @param studentYear The new value for studentYear
   * @param schoolId The new value for schoolId
   * @param schoolName The new value for schoolName
   */
  public StudentEvent(java.lang.Object studentId, java.lang.CharSequence studentName, java.lang.Object studentSemester, java.lang.Object studentYear, java.lang.Object schoolId, java.lang.CharSequence schoolName) {
    this.studentId = studentId;
    this.studentName = studentName;
    this.studentSemester = studentSemester;
    this.studentYear = studentYear;
    this.schoolId = schoolId;
    this.schoolName = schoolName;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentId;
    case 1: return studentName;
    case 2: return studentSemester;
    case 3: return studentYear;
    case 4: return schoolId;
    case 5: return schoolName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentId = value$; break;
    case 1: studentName = (java.lang.CharSequence)value$; break;
    case 2: studentSemester = value$; break;
    case 3: studentYear = value$; break;
    case 4: schoolId = value$; break;
    case 5: schoolName = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'studentId' field.
   * @return The value of the 'studentId' field.
   */
  public java.lang.Object getStudentId() {
    return studentId;
  }


  /**
   * Sets the value of the 'studentId' field.
   * @param value the value to set.
   */
  public void setStudentId(java.lang.Object value) {
    this.studentId = value;
  }

  /**
   * Gets the value of the 'studentName' field.
   * @return The value of the 'studentName' field.
   */
  public java.lang.CharSequence getStudentName() {
    return studentName;
  }


  /**
   * Sets the value of the 'studentName' field.
   * @param value the value to set.
   */
  public void setStudentName(java.lang.CharSequence value) {
    this.studentName = value;
  }

  /**
   * Gets the value of the 'studentSemester' field.
   * @return The value of the 'studentSemester' field.
   */
  public java.lang.Object getStudentSemester() {
    return studentSemester;
  }


  /**
   * Sets the value of the 'studentSemester' field.
   * @param value the value to set.
   */
  public void setStudentSemester(java.lang.Object value) {
    this.studentSemester = value;
  }

  /**
   * Gets the value of the 'studentYear' field.
   * @return The value of the 'studentYear' field.
   */
  public java.lang.Object getStudentYear() {
    return studentYear;
  }


  /**
   * Sets the value of the 'studentYear' field.
   * @param value the value to set.
   */
  public void setStudentYear(java.lang.Object value) {
    this.studentYear = value;
  }

  /**
   * Gets the value of the 'schoolId' field.
   * @return The value of the 'schoolId' field.
   */
  public java.lang.Object getSchoolId() {
    return schoolId;
  }


  /**
   * Sets the value of the 'schoolId' field.
   * @param value the value to set.
   */
  public void setSchoolId(java.lang.Object value) {
    this.schoolId = value;
  }

  /**
   * Gets the value of the 'schoolName' field.
   * @return The value of the 'schoolName' field.
   */
  public java.lang.CharSequence getSchoolName() {
    return schoolName;
  }


  /**
   * Sets the value of the 'schoolName' field.
   * @param value the value to set.
   */
  public void setSchoolName(java.lang.CharSequence value) {
    this.schoolName = value;
  }

  /**
   * Creates a new StudentEvent RecordBuilder.
   * @return A new StudentEvent RecordBuilder
   */
  public static com.school.management.schema.student.StudentEvent.Builder newBuilder() {
    return new com.school.management.schema.student.StudentEvent.Builder();
  }

  /**
   * Creates a new StudentEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StudentEvent RecordBuilder
   */
  public static com.school.management.schema.student.StudentEvent.Builder newBuilder(com.school.management.schema.student.StudentEvent.Builder other) {
    if (other == null) {
      return new com.school.management.schema.student.StudentEvent.Builder();
    } else {
      return new com.school.management.schema.student.StudentEvent.Builder(other);
    }
  }

  /**
   * Creates a new StudentEvent RecordBuilder by copying an existing StudentEvent instance.
   * @param other The existing instance to copy.
   * @return A new StudentEvent RecordBuilder
   */
  public static com.school.management.schema.student.StudentEvent.Builder newBuilder(com.school.management.schema.student.StudentEvent other) {
    if (other == null) {
      return new com.school.management.schema.student.StudentEvent.Builder();
    } else {
      return new com.school.management.schema.student.StudentEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for StudentEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StudentEvent>
    implements org.apache.avro.data.RecordBuilder<StudentEvent> {

    private java.lang.Object studentId;
    private java.lang.CharSequence studentName;
    private java.lang.Object studentSemester;
    private java.lang.Object studentYear;
    private java.lang.Object schoolId;
    private java.lang.CharSequence schoolName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.school.management.schema.student.StudentEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.studentName)) {
        this.studentName = data().deepCopy(fields()[1].schema(), other.studentName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.studentSemester)) {
        this.studentSemester = data().deepCopy(fields()[2].schema(), other.studentSemester);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.studentYear)) {
        this.studentYear = data().deepCopy(fields()[3].schema(), other.studentYear);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.schoolId)) {
        this.schoolId = data().deepCopy(fields()[4].schema(), other.schoolId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.schoolName)) {
        this.schoolName = data().deepCopy(fields()[5].schema(), other.schoolName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing StudentEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.school.management.schema.student.StudentEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.studentName)) {
        this.studentName = data().deepCopy(fields()[1].schema(), other.studentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.studentSemester)) {
        this.studentSemester = data().deepCopy(fields()[2].schema(), other.studentSemester);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.studentYear)) {
        this.studentYear = data().deepCopy(fields()[3].schema(), other.studentYear);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.schoolId)) {
        this.schoolId = data().deepCopy(fields()[4].schema(), other.schoolId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.schoolName)) {
        this.schoolName = data().deepCopy(fields()[5].schema(), other.schoolName);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'studentId' field.
      * @return The value.
      */
    public java.lang.Object getStudentId() {
      return studentId;
    }


    /**
      * Sets the value of the 'studentId' field.
      * @param value The value of 'studentId'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setStudentId(java.lang.Object value) {
      validate(fields()[0], value);
      this.studentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studentId' field has been set.
      * @return True if the 'studentId' field has been set, false otherwise.
      */
    public boolean hasStudentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studentId' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearStudentId() {
      studentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'studentName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStudentName() {
      return studentName;
    }


    /**
      * Sets the value of the 'studentName' field.
      * @param value The value of 'studentName'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setStudentName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.studentName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'studentName' field has been set.
      * @return True if the 'studentName' field has been set, false otherwise.
      */
    public boolean hasStudentName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'studentName' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearStudentName() {
      studentName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'studentSemester' field.
      * @return The value.
      */
    public java.lang.Object getStudentSemester() {
      return studentSemester;
    }


    /**
      * Sets the value of the 'studentSemester' field.
      * @param value The value of 'studentSemester'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setStudentSemester(java.lang.Object value) {
      validate(fields()[2], value);
      this.studentSemester = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'studentSemester' field has been set.
      * @return True if the 'studentSemester' field has been set, false otherwise.
      */
    public boolean hasStudentSemester() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'studentSemester' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearStudentSemester() {
      studentSemester = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'studentYear' field.
      * @return The value.
      */
    public java.lang.Object getStudentYear() {
      return studentYear;
    }


    /**
      * Sets the value of the 'studentYear' field.
      * @param value The value of 'studentYear'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setStudentYear(java.lang.Object value) {
      validate(fields()[3], value);
      this.studentYear = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'studentYear' field has been set.
      * @return True if the 'studentYear' field has been set, false otherwise.
      */
    public boolean hasStudentYear() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'studentYear' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearStudentYear() {
      studentYear = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'schoolId' field.
      * @return The value.
      */
    public java.lang.Object getSchoolId() {
      return schoolId;
    }


    /**
      * Sets the value of the 'schoolId' field.
      * @param value The value of 'schoolId'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setSchoolId(java.lang.Object value) {
      validate(fields()[4], value);
      this.schoolId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'schoolId' field has been set.
      * @return True if the 'schoolId' field has been set, false otherwise.
      */
    public boolean hasSchoolId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'schoolId' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearSchoolId() {
      schoolId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'schoolName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchoolName() {
      return schoolName;
    }


    /**
      * Sets the value of the 'schoolName' field.
      * @param value The value of 'schoolName'.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder setSchoolName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.schoolName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'schoolName' field has been set.
      * @return True if the 'schoolName' field has been set, false otherwise.
      */
    public boolean hasSchoolName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'schoolName' field.
      * @return This builder.
      */
    public com.school.management.schema.student.StudentEvent.Builder clearSchoolName() {
      schoolName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StudentEvent build() {
      try {
        StudentEvent record = new StudentEvent();
        record.studentId = fieldSetFlags()[0] ? this.studentId :  defaultValue(fields()[0]);
        record.studentName = fieldSetFlags()[1] ? this.studentName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.studentSemester = fieldSetFlags()[2] ? this.studentSemester :  defaultValue(fields()[2]);
        record.studentYear = fieldSetFlags()[3] ? this.studentYear :  defaultValue(fields()[3]);
        record.schoolId = fieldSetFlags()[4] ? this.schoolId :  defaultValue(fields()[4]);
        record.schoolName = fieldSetFlags()[5] ? this.schoolName : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StudentEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<StudentEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StudentEvent>
    READER$ = (org.apache.avro.io.DatumReader<StudentEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










